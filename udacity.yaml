AWSTemplateFormatVersion: "2010-09-09"
Description: "Mariko1 Udagram"

Parameters:
  EnvironmentName:
          Description: Single Parameter that we are passing with the env name.
          Type: String 
  VPCCIDR:
    Description: CIDR ip for your vpc
    Type: String
    Default: 10.1.0.0/20
  PublicSunbet1:
    Description: CIDR ip for your public subnet 1
    Type: String
    Default: 10.1.0.0/27
  PublicSunbet2:
    Description: CIDR ip for your public subnet 2
    Type: String
    Default: 10.1.0.32/27
  PrivateSubnet1:
    Description: CIDR ip for your private subnet 1
    Type: String
    Default: 10.1.0.64/27
  PrivateSubnet2:
    Description: CIDR ip for your private subnet 1
    Type: String
    Default: 10.1.0.96/27
  s3bucket:
    Description: s3 bucket which has the code
    Type: String
    Default: markudacity
  s3ReadWritePolicyName:
    Description: iam policy which has permission to read & write to s3 bucket
    Type: String
    Default: s3ReadWritePolicy
  InstanceRoleName:
    Description: iam role name which s3ReadWritePolicyName policy attached to it
    Type: String
    Default: S3AccessForEC2


Resources:

  MarkLabVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: "default"
      Tags:
        - Key: Project
          Value: mark

  Mariko1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MarkLabVPC
      CidrBlock: !Ref PublicSunbet1
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: True

  Mariko1PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MarkLabVPC
      CidrBlock: !Ref PublicSunbet2
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: True

  Mariko1PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MarkLabVPC
      CidrBlock: !Ref PrivateSubnet1
      AvailabilityZone: "us-east-1a"

  Mariko1PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MarkLabVPC
      CidrBlock: !Ref PrivateSubnet2
      AvailabilityZone: "us-east-1b"

  Mariko1InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  Mariko1InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MarkLabVPC
      InternetGatewayId: !Ref Mariko1InternetGateway

  ElasticIPNATGateway:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref Mariko1
      AllocationId:
        Fn::GetAtt:
          - ElasticIPNATGateway
          - AllocationId

  Mariko1PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MarkLabVPC

  Mariko1PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MarkLabVPC

  Mariko1PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref Mariko1PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref Mariko1InternetGateway

  Mariko1PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref Mariko1PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  Mariko1PrivateSubnet1RouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Mariko1PrivateSubnet1
      RouteTableId: !Ref Mariko1PrivateRouteTable

  Mariko1PrivateSubnet2RouteAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Mariko1PrivateSubnet2
      RouteTableId: !Ref Mariko1PrivateRouteTable

  Mariko1RouteAssociate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Mariko1
      RouteTableId: !Ref Mariko1PublicRouteTable

  Mariko1PublicSubnet2RouteAssociate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Mariko1PublicSubnet2
      RouteTableId: !Ref Mariko1PublicRouteTable

  S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref s3ReadWritePolicyName
      Roles:
        - !Ref InstanceProfileRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:GetObject
              - s3:List*
              - s3:PutObject
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Resource: '*'

  InstanceProfileRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref InstanceRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "ec2.amazonaws.com"

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: 'InstanceProfileEC2'
      Path: /
      Roles:
        - !Ref InstanceProfileRole

  BastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: BastionGroup
      GroupDescription: SSH bastion host from my pc
      VpcId: !Ref MarkLabVPC

  BastionSecurityGroupEgress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: ALBSG
      GroupDescription: http access from internet
      VpcId: !Ref MarkLabVPC

  ALBSecurityGroupHttpIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  ALBSecurityGroupHttpIngressPrivate:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref WebServerSecGroup

  WebServerSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: AppServerSG
      GroupDescription: http from ALB and ssh from bastion
      VpcId: !Ref MarkLabVPC

  WebServerSecGroupSSHIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref WebServerSecGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref BastionSecurityGroup

  WebServerSecGroupHttpsIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref WebServerSecGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref ALBSecurityGroup

  Mariko1LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: "ami-026c8acd92718196b"
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
            DeleteOnTermination: true
            VolumeType: "gp2"
      EbsOptimized: false
      IamInstanceProfile: !Ref InstanceProfile
      InstanceMonitoring: false
      InstanceType: "t2.medium"
      LaunchConfigurationName: "Mariko1-launchgroup"
      SecurityGroups:
        - !Ref WebServerSecGroup
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo service apache2 start
          sudo apt install python-pip -y
          sudo pip install awscli
          sudo aws s3 cp s3://markudacity/s3.html /var/www/html/
          sudo rm /var/www/html/index.html
          cd /var/www/html/
          sudo mv s3.html index.html
          sudo service  apache2 reload
          
                
          
          
  Mariko1ASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: "Mariko1-autogroup"
      LaunchConfigurationName: !Ref Mariko1LaunchConfiguration
#      LoadBalancerNames:
#        - !Ref Mariko1ALB
      DesiredCapacity: 4
      MinSize: 4
      MaxSize: 8
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref Mariko1ALBTargetGroup
      Tags:
        -
          ResourceType: "auto-scaling-group"
          Key: "Project"
          Value: "Mariko1"
          PropagateAtLaunch: true
          ResourceId: "Mariko1-autogroup"
      VPCZoneIdentifier:
        - !Ref Mariko1PrivateSubnet1
        - !Ref Mariko1PrivateSubnet2

  Mariko1ASGScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref Mariko1ASG
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        TargetValue: 80
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
      EstimatedInstanceWarmup: 300

  Mariko1ALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "Mariko1-alb"
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref Mariko1
        - !Ref Mariko1PublicSubnet2
      Tags: []
      IpAddressType: "ipv4"
      Type: "application"

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Mariko1ALBTargetGroup
      LoadBalancerArn: !Ref Mariko1ALB
      Port: 80
      Protocol: HTTP

  Mariko1ALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: "mariko-target-group"
      Port: 80
      Protocol: "HTTP"
      TargetType: "instance"
      UnhealthyThresholdCount: 2
      VpcId: !Ref MarkLabVPC

  BastionHostEC2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-026c8acd92718196b"
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: "gp2"
      InstanceType: "t2.micro"
      SubnetId: !Ref Mariko1
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: "Bastion"


Outputs:

  DNSNAME:
    Value:
      Fn::Join:
        - ''
        - - "http://"
          - !GetAtt Mariko1ALB.DNSName
          - "/"